<?php

/**
 * @category  Scandiweb
 * @author    Ziad Alnagar <ziad.alnagar@scandiweb.com | info@scandiweb.com>
 * @copyright Copyright (c) 2023 Scandiweb, Inc (https://scandiweb.com)
 * @license   http://opensource.org/licenses/OSL-3.0 The Open Software License 3.0 (OSL-3.0)
 */

declare(strict_types=1);

use Magento\Framework\Escaper;
use Hyva\Theme\ViewModel\ReCaptcha;
use Magento\Customer\Helper\Address;
use Magento\Customer\Block\Widget\Dob;
use Hyva\Theme\Model\ViewModelRegistry;
use Magento\Customer\Block\Form\Register;
use Magento\Customer\Block\Widget\Gender;
use Magento\Customer\Block\Widget\Taxvat;
use Hyva\Theme\ViewModel\HeroiconsOutline;
use Magento\Cms\Block\BlockByIdentifier as CmsBlock;
use Magento\Customer\Block\Widget\Name as NameWidget;
use Hyva\Theme\ViewModel\Customer\CreateAccountButton;

/** @var Register $block */
/** @var Escaper $escaper */
/** @var ReCaptcha $recaptcha */
/** @var ViewModelRegistry $viewModels */
/** @var HeroiconsOutline $heroiconsOutline */
/** @var CreateAccountButton $createAccountButtonViewModel */

$formId = 'accountcreate';

// Do not replace this with $viewModels->require(ReCaptcha::class); that might break the dependency
// on the Magento_ReCaptchaCustomer module
$recaptcha = $block->getData('viewModelRecaptcha');
$createAccountButtonViewModel = $viewModels->require(CreateAccountButton::class);
$region = $block->getAttributeData()->getFrontendLabel('region');
$selectRegion = 'Please select a region, state or province.';
$showOptionalRegions = $block->getConfig('general/region/display_all');
$regionLabel = $block->getAttributeData()->getFrontendLabel('region');
$minimumPasswordLength = $block->getMinimumPasswordLength();
$passwordMinCharacterSets = $block->getRequiredCharacterClassesNumber();
$heroiconsOutline = $viewModels->require(HeroiconsOutline::class);
?>
<div class="mb-8">
    <?php /* Extensions placeholder */ ?>
    <?= $block->getChildHtml('customer.form.register.extra') ?>
    <form class="form create account form-create-account" action="<?= $escaper->escapeUrl($block->getPostActionUrl()) ?>" x-data="Object.assign(hyva.formValidation($el), initForm())" <?php if ($block->getShowAddressFields()) : ?> @private-content-loaded.window="onPrivateContentLoaded(event.detail.data)" <?php endif; ?> id="<?= $escaper->escapeHtmlAttr($formId) ?>" @submit.prevent="submitForm()" method="post" id="form-validate" enctype="multipart/form-data" autocomplete="off">
        <?= /* @noEscape */ $block->getBlockHtml('formkey'); ?>
        <?= $block->getChildHtml('form_fields_before') ?>
        <?= $recaptcha ? $recaptcha->getInputHtml(ReCaptcha::RECAPTCHA_FORM_ID_CUSTOMER_CREATE) : '' ?>
        <div class="md:grid grid-cols-2">
            <fieldset class="bg-white pt-10 pb-5">
                <div>HELLO WORLD</div>
                <div class="md:max-w-[380px] mx-auto">
                    <div class="block-title mb-5">
                        <h2 class="text-3xl font-medium title-font text-primary" role="heading" aria-level="1"><?= $escaper->escapeHtml(__('Create an account')) ?></h2>
                    </div>
                    <input type="hidden" name="success_url" value="<?= $escaper->escapeUrl($block->getSuccessUrl()) ?>">
                    <input type="hidden" name="error_url" value="<?= $escaper->escapeUrl($block->getErrorUrl()) ?>">
                    <?= $block->getLayout()->createBlock(NameWidget::class)->setObject($block->getFormData())->setForceUseCustomerAttributes(true)->toHtml() ?>

                    <?php $dob = $block->getLayout()->createBlock(Dob::class) ?>
                    <?php if ($dob->isEnabled()) : ?>
                        <?= $dob->setDate($block->getFormData()->getDob())->toHtml() ?>
                    <?php endif ?>

                    <?php $taxvat = $block->getLayout()->createBlock(Taxvat::class) ?>
                    <?php if ($taxvat->isEnabled()) : ?>
                        <?= $taxvat->setTaxvat($block->getFormData()->getTaxvat())->toHtml() ?>
                    <?php endif ?>

                    <?php $gender = $block->getLayout()->createBlock(Gender::class) ?>
                    <?php if ($gender->isEnabled()) : ?>
                        <?= $gender->setGender($block->getFormData()->getGender())->toHtml() ?>
                    <?php endif ?>

                    <div class="field required">
                        <div class="control">
                            <input type="email" name="email" autocomplete="email" id="email_address" required value="<?= $escaper->escapeHtmlAttr($block->getFormData()->getEmail()) ?>" title="<?= $escaper->escapeHtmlAttr(__('Email')) ?>" class="form-input" placeholder="<?= $escaper->escapeHtmlAttr(__('Email')) ?> *" />
                        </div>
                    </div>
                    <div class="field relative">
                        <div class="control flex items-center">
                            <?php $minimumPasswordLength = $block->getMinimumPasswordLength() ?>
                            <input :type="showPassword ? 'text' : 'password'" type="password" id="password" name="password" title="<?= $escaper->escapeHtmlAttr(__('Password')) ?>" minlength="<?= $escaper->escapeHtmlAttr($minimumPasswordLength) ?>" class="form-input" required data-validate='{"password-strength": {"minCharacterSets": <?= (int) $passwordMinCharacterSets ?>}}' @input="onChange" autocomplete="off" placeholder="<?= $escaper->escapeHtmlAttr(__('Password')) ?> *">
                            <div x-on:click="showPassword = !showPassword" class="absolute right-0 cursor-pointer px-4" :aria-label="showPassword ? '<?= $escaper->escapeJs(__('Hide Password')) ?>' : '<?= $escaper->escapeJs(__('Show Password')) ?>'">
                                <template x-if="!showPassword">
                                    <?= $heroiconsOutline->eyeHtml('w-5 h-5'); ?>
                                </template>
                                <template x-if="showPassword">
                                    <?= $heroiconsOutline->eyeOffHtml('w-5 h-5'); ?>
                                </template>
                            </div>
                        </div>
                    </div>
                    <div class="field relative">
                        <div class="control flex items-center">
                            <input :type="showPasswordConfirm ? 'text' : 'password'" type="password" name="password_confirmation" title="<?= $escaper->escapeHtmlAttr(__('Confirm Password')) ?>" id="password-confirmation" data-validate='{"equalTo": "password"}' @input="onChange" required class="form-input" autocomplete="off" placeholder="<?= $escaper->escapeHtmlAttr(__('Confirm Password')) ?> *">
                            <div x-on:click="showPasswordConfirm = !showPasswordConfirm" class="absolute right-0 cursor-pointer px-4 :aria-label=" showPasswordConfirm ? '<?= $escaper->escapeJs(__('Hide Password')) ?>' : '<?= $escaper->escapeJs(__('Show Password')) ?>'">
                                <template x-if=" !showPassword">
                                <?= $heroiconsOutline->eyeHtml('w-5 h-5'); ?>
                                </template>
                                <template x-if="showPassword">
                                    <?= $heroiconsOutline->eyeOffHtml('w-5 h-5'); ?>
                                </template>
                            </div>
                        </div>
                    </div>

                    <?php if ($block->isNewsletterEnabled()) : ?>
                        <div class="field choice newsletter">
                            <input type="checkbox" name="is_subscribed" title="<?= $escaper->escapeHtmlAttr(__('Sign Up for Newsletter')) ?>" value="1" id="is_subscribed" <?php if ($block->getFormData()->getIsSubscribed()) : ?> checked="checked" <?php endif; ?> class="checkbox">
                            <label for="is_subscribed" class="label">
                                <span>
                                    <?= $escaper->escapeHtml(__('Sign Up for Newsletter')) ?>
                                </span>
                            </label>
                        </div>
                        <?php /* Extensions placeholder */ ?>
                        <?= $block->getChildHtml('customer.form.register.newsletter') ?>
                    <?php endif ?>
                    <?= $block->getChildHtml('fieldset_create_info_additional') ?>

                    <?= $block->getChildHtml('form_additional_info') ?>
                    <?= $recaptcha ? $recaptcha->getLegalNoticeHtml(ReCaptcha::RECAPTCHA_FORM_ID_CUSTOMER_CREATE) : '' ?>

                    <div class="actions-toolbar flex">
                        <button type="submit" class="action submit primary auth-btn-primary disabled:opacity-75" title="<?= $escaper->escapeHtmlAttr(__('Create an Account')) ?>" <?php if ($createAccountButtonViewModel->disabled()) : ?> disabled="disabled" data-recaptcha-btn<?php endif; ?>>
                            <?= $escaper->escapeHtml(__('Sign up')) ?>
                        </button>
                    </div>
                    <p class="text-sm leading-normal text-black">
                        By clicking the "Sign up" button I confirm that I have read and accepted the
                        <a href="/terms-and-conditions" class="border-b-2 font-bold">General Terms and Conditions</a> and
                        <a href="/privacy-policy" class="border-b-2 font-bold">Privacy Policy</a>
                    </p>
                    <div class="mt-6 md:mt-8 flex items-center gap-2 md:block w-max mx-auto md:w-full">
                        <p class="text-md md:text-lg">Already have an account?</p>
                        <a class="redirect-login flex justify-center items-center md:mt-4 md:btn md:btn-secondary font-bold" href="/customer/account/login" title="Log in">
                            Log in
                        </a>
                    </div>
            </fieldset>
            <div class="hidden md:flex justify-center bg-container-light md:bg-transparent md:shadow-none card w-full py-10">
                <div class="md:max-w-sm">
                    <?= $this->getLayout()
                        ->createBlock(CmsBlock::class)
                        ->setData('identifier', 'login-registration-content')
                        ->toHtml(); ?>
                </div>
            </div>
        </div>
</div>

<?php if ($block->getShowAddressFields()) : ?>
    <fieldset class="my-8 card">
        <legend class="contents">
            <span>
                <?= $escaper->escapeHtml(__('Address Information')) ?>
            </span>
        </legend>
        <input type="hidden" name="create_address" value="1" />

        <?php $company = $block->getLayout()->createBlock(\Magento\Customer\Block\Widget\Company::class) ?>
        <?php if ($company->isEnabled()) : ?>
            <?= $company->setCompany($block->getFormData()->getCompany())->toHtml() ?>
        <?php endif ?>

        <?php $telephone = $block->getLayout()->createBlock(\Magento\Customer\Block\Widget\Telephone::class) ?>
        <?php if ($telephone->isEnabled()) : ?>
            <?= $telephone->setTelephone($block->getFormData()->getTelephone())->toHtml() ?>
        <?php endif ?>

        <?php $fax = $block->getLayout()->createBlock(\Magento\Customer\Block\Widget\Fax::class) ?>
        <?php if ($fax->isEnabled()) : ?>
            <?= $fax->setFax($block->getFormData()->getFax())->toHtml() ?>
        <?php endif ?>
        <?php $streetValidationClass =
            $this->helper(Address::class)->getAttributeValidationClass(
                'street'
            ); ?>
        <div class="field street required">
            <label for="street_1" class="label"><span><?= /* @noEscape */
                                                        $block->getAttributeData()->getFrontendLabel('street') ?></span></label>
            <div class="control">
                <input type="text" name="street[]" value="<?= $escaper->escapeHtmlAttr($block->getFormData()->getStreet(0)) ?>" title="<?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('street') ?>" id="street_1" class="form-input <?= $escaper->escapeHtmlAttr($streetValidationClass) ?>">
                <div class="nested">
                    <?php $streetValidationClass =
                        trim(str_replace('required-entry', '', $streetValidationClass)); ?>
                    <?php for ($i = 2, $n = $this->helper(Address::class)->getStreetLines(); $i <= $n; $i++) : ?>
                        <div class="field additional">
                            <label class="label" for="street_<?= /* @noEscape */ $i ?>">
                                <span><?= $escaper->escapeHtml(__('Address')) ?></span>
                            </label>
                            <div class="control">
                                <input type="text" name="street[]" value="<?= $escaper->escapeHtmlAttr($block
                                                                                ->getFormData()
                                                                                ->getStreetLine($i - 1)) ?>" title="<?= $escaper
                                                                                                                        ->escapeHtmlAttr(__('Street Address %1', $i)) ?>" id="street_<?= (int) $i ?>" class="form-input <?= $escaper
                                                                                                                                                                                                                            ->escapeHtmlAttr($streetValidationClass) ?>">
                            </div>
                        </div>
                    <?php endfor; ?>
                </div>
            </div>
        </div>

        <div class="field required">
            <label for="city" class="label">
                <span>
                    <?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('city') ?>
                </span>
            </label>
            <div class="control">
                <input type="text" name="city" value="<?= $escaper->escapeHtmlAttr($block->getFormData()->getCity()) ?>" title="<?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('city') ?>" class="form-input <?= $escaper->escapeHtmlAttr($this
                                                                                                                                                                                                                                    ->helper(Address::class)
                                                                                                                                                                                                                                    ->getAttributeValidationClass('city')) ?>" id="city">

            </div>
        </div>

        <div class="field region w-full" x-cloak x-show="(hasAvailableRegions() && isRegionRequired) || showOptionalRegions">
            <label class="label" for="region_id">
                <span><?= /* @noEscape */ $regionLabel ?></span>
            </label>
            <div class="control">
                <template x-if="hasAvailableRegions() && (isRegionRequired || showOptionalRegions)">
                    <select id="region_id" name="region_id" title="<?= /* @noEscape */ $regionLabel ?>" class="form-select validate-select region_id" x-ref="region_id" x-model="selectedRegion" @change="$refs.region.value = availableRegions[selectedRegion].name">
                        <option value=""><?= $escaper->escapeHtml(__('Please select a region, state or province.')) ?></option>
                        <template x-for="regionId in Object.keys(availableRegions)">
                            <option :value="regionId" :name="availableRegions[regionId] && availableRegions[regionId].name" x-text="availableRegions[regionId] && availableRegions[regionId].name" :selected="selectedRegion === regionId">
                            </option>
                        </template>
                    </select>
                </template>
                <input :type="hasAvailableRegions() && (isRegionRequired || showOptionalRegions) ? 'hidden' : 'text'" id="region" name="region" x-ref="region" value="<?= $escaper->escapeHtmlAttr($block->getRegion()) ?>" title="<?= /* @noEscape */ $regionLabel ?>" class="form-input" :required="isRegionRequired" />
            </div>
        </div>

        <div class="field zip w-full">
            <label class="label" for="zip">
                <span>
                    <?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('postcode') ?>
                </span>
            </label>
            <div class="control">
                <input type="text" name="postcode" x-ref="postcode" value="" title="<?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('postcode') ?>" id="zip" :required="isZipRequired" @change="onChange" data-validate='{"postcode": true}' class="form-input validate-zip-international
                        <?= $escaper->escapeHtmlAttr($this->helper(Address::class)->getAttributeValidationClass('postcode')) ?>">
            </div>
        </div>

        <div class="field country w-full">
            <label class="label" for="country">
                <span>
                    <?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('country_id') ?>
                </span>
            </label>
            <div class="control">
                <?php $countries = $block
                    ->getCountryCollection()
                    ->setForegroundCountries($block->getTopDestinations())
                    ->toOptionArray();
                ?>
                <select name="country_id" id="country" title="Country" required class="form-select" x-ref="country_id" @change="changeCountry($event.target)">
                    <?php foreach ($countries as $country) : ?>
                        <option name="<?=
                                        /** @noEscape */
                                        $country['label'] ?>" value="<?=
                                                                        /** @noEscape */
                                                                        $country['value'] ?>" data-is-zip-required="<?= (isset($country['is_zipcode_optional'])) ? '0' : '1' ?>" data-is-region-required="<?= (isset($country['is_region_required'])) ? '1' : '0' ?>" <?= ($block->getCountryId() ===  $country['value']) ? 'selected="selected"' : '' ?>>
                            <?=
                            /** @noEscape */
                            $country['label'] ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>
        </div>
        <?php $addressAttributes = $block->getChildBlock('customer_form_address_user_attributes'); ?>
        <?php if ($addressAttributes) : ?>
            <?php $addressAttributes->setEntityType('customer_address'); ?>
            <?php $addressAttributes->setFieldIdFormat('address:%1$s')->setFieldNameFormat('address[%1$s]'); ?>
            <?php $block->restoreSessionData($addressAttributes->getMetadataForm(), 'address'); ?>
            <?= $addressAttributes->setShowContainer(false)->toHtml() ?>
        <?php endif; ?>
        <input type="hidden" name="default_billing" value="1">
        <input type="hidden" name="default_shipping" value="1">
    </fieldset>
<?php endif; ?>
</form>

<script>
    function initForm() {
        return {
            errors: 0,
            hasCaptchaToken: 0,
            showPassword: false,
            showPasswordConfirm: false,
            submitForm() {
                this.validate()
                    .then(() => {
                        // Do not rename $form, the variable is expected to be declared in the recaptcha output
                        const $form = document.querySelector('#<?= $escaper->escapeJs($formId) ?>');
                        <?= $recaptcha ? $recaptcha->getValidationJsHtml(ReCaptcha::RECAPTCHA_FORM_ID_CUSTOMER_CREATE) : '' ?>

                        if (this.errors === 0) {
                            $form.submit();
                        }
                    })
                    .catch((invalid) => {
                        if (invalid.length > 0) {
                            invalid[0].focus();
                        }
                    });
            },
            <?php if ($block->getShowAddressFields()) : ?>
                directoryData: {},
                availableRegions: {},
                selectedRegion: <?= $escaper->escapeJs($block->getRegion() ?: 0) ?>,
                isZipRequired: true,
                isRegionRequired: true,
                showOptionalRegions: <?= $showOptionalRegions ? 'true' : 'false' ?>,
                onPrivateContentLoaded(data) {
                    this.directoryData = data['directory-data'] || {};

                    <?php if ($block->getCountryId()) : ?>
                        this.setCountry(this.$refs['country_id'], '<?= $escaper->escapeJs($block->getRegion()) ?>');
                    <?php endif; ?>

                },
                setRegionInputValue(regionName) {
                    this.$nextTick(() => {
                        const regionInputElement = this.$refs['region'];
                        if (regionInputElement) {
                            regionInputElement.value = regionName;
                        }
                    })
                },
                setCountry(countrySelectElement, initialRegion) {
                    const selectedOption = countrySelectElement.options[countrySelectElement.selectedIndex];
                    const countryCode = countrySelectElement.value;
                    const countryData = this.directoryData[countryCode] || false;

                    if (!countryData) {
                        this.setRegionInputValue('');
                        return;
                    }

                    this.isZipRequired = selectedOption.dataset.isZipRequired === '1';
                    this.isRegionRequired = selectedOption.dataset.isRegionRequired === '1';

                    this.availableRegions = countryData.regions || {};

                    const initialRegionId = Object.keys(this.availableRegions).filter(regionId => this.availableRegions[regionId].name === initialRegion)[0];
                    this.selectedRegion = initialRegionId || '0';
                    this.setRegionInputValue(initialRegionId && this.availableRegions[initialRegionId].name || '');

                },
                changeCountry(countrySelectElement, initialRegion) {
                    this.setCountry(countrySelectElement, initialRegion);

                    this.validateCountryDependentFields();
                },
                validateCountryDependentFields() {
                    this.$nextTick(() => {
                        <?php /* Reinitialize validation rules for fields that depend on the country */ ?>
                        this.fields['postcode'] && this.removeMessages(this.fields['postcode'])
                        this.fields['region'] && this.removeMessages(this.fields['region'])
                        delete this.fields['postcode'];
                        delete this.fields['region'];
                        <?php /* Initialize country_id, too, because the postcode validation depends on it */ ?>
                        this.setupField(this.$refs['country_id']);
                        this.setupField(this.$refs['postcode']);
                        this.setupField(this.$refs['region']);

                        this.fields['postcode'] && this.validateField(this.fields['postcode']);
                        this.fields['region'] && this.validateField(this.fields['region']);
                    })
                },
                hasAvailableRegions() {
                    return Object.keys(this.availableRegions).length > 0;
                }
            <?php endif; ?>
        }
    }

    window.addEventListener('DOMContentLoaded', () => {

        hyva.formValidation.addRule('telephone', (value, options) => {
            const phoneNumber = value.trim().replace(' ', '');
            if (phoneNumber && phoneNumber.length < (options.minlength || 3)) {
                return '<?= $escaper->escapeJs(__('The telephone number is too short.')) ?>';
            }

            return true;
        });

        const postCodeSpecs = <?= /* @noEscape */ $block->getPostCodeConfig()->getSerializedPostCodes() ?>;

        hyva.formValidation.addRule('postcode', (postCode, options, field, context) => {
            context.removeMessages(field, 'postcode-warning')
            const countryId = (context.fields['country_id'] && context.fields['country_id'].element.value),
                validatedPostCodeExamples = [],
                countryPostCodeSpecs = countryId && postCodeSpecs ? postCodeSpecs[countryId] : false;

            if (!postCode || !countryPostCodeSpecs) return true;

            for (const postCodeSpec of Object.values(countryPostCodeSpecs)) {
                if (new RegExp(postCodeSpec.pattern).test(postCode)) return true;
                validatedPostCodeExamples.push(postCodeSpec.example);
            }
            if (validatedPostCodeExamples) {
                context.addMessages(field, 'postcode-warning', [
                    '<?= $escaper->escapeJs(__('Provided Zip/Postal Code seems to be invalid.')) ?>',
                    '<?= $escaper->escapeJs(__('Example: ')) ?>' + validatedPostCodeExamples.join('; ') + '. ',
                    '<?= $escaper->escapeJs(__('If you believe it is the right one you can ignore this notice.')) ?>'
                ]);
            }

            return true;
        });
    })
</script>
</div>
