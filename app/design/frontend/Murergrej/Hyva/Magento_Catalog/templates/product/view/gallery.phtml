<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\StoreConfig;
use Hyva\Theme\ViewModel\HeroiconsOutline;
use Hyva\Theme\ViewModel\HeroiconsSolid;
use Magento\Catalog\Block\Product\View\Gallery;
use Magento\Catalog\Helper\Image;
use Magento\Framework\Escaper;

/** @var Escaper $escaper */
/** @var Gallery $block */
/** @var ViewModelRegistry $viewModels */

/** @var StoreConfig $storeConfig */
$storeConfig = $viewModels->require(StoreConfig::class);

/** @var HeroiconsOutline $heroicons */
$heroicons = $viewModels->require(HeroiconsOutline::class);

/** @var HeroiconsSolid $heroiconsSolid */
$heroiconsSolid = $viewModels->require(HeroiconsSolid::class);

$images = $block->getGalleryImages()->getItems();
$mainImage = current(array_filter($images, [$block, 'isMainImage']));

if (!empty($images) && empty($mainImage)) {
    $mainImage = reset($images);
}

/** @var Image $helper */
$helper = $block->getData('imageHelper');
$mainImageData = $mainImage ?
    $mainImage->getData('medium_image_url') :
    $helper->getDefaultPlaceholderUrl('image');

$smallWidth = $block->getImageAttribute('product_page_image_small', 'width', 90);
$smallHeight = $block->getImageAttribute('product_page_image_small', 'height', 90);
$mediumWidth = $block->getImageAttribute('product_page_image_medium', 'width', 568);
$mediumHeight = $block->getImageAttribute('product_page_image_medium', 'height', 568);

$galleryOptionShowRelated = $storeConfig->getStoreConfig('catalog/product_video/show_related') ?? false;
$galleryOptionVideoLoop = $storeConfig->getStoreConfig('catalog/product_video/video_auto_restart') ?? false;

$productName = $block->getProduct()->getName();

$swiperUrl = $block->getViewFileUrl('js/swiper.min.js');
$swiperCssUrl = $block->getViewFileUrl('css/swiper.min.css');
$uniqueId = uniqid('_');
$uniqueId1 = $uniqueId . '1';
$uniqueId2 = $uniqueId . '2';
?>

<div id="gallery"
     x-data="initGallery('<?= $uniqueId1; ?>', '<?= $uniqueId2; ?>', '<?= $swiperUrl; ?>', '<?= $swiperCssUrl; ?>')"
     x-bind="eventListeners"
     class="w-full pb-5 pt-0 md:h-auto md:row-start-1 md:row-span-2 md:col-start-1"
    >
    <div
        :class="{'w-full h-full fixed top-0 left-0 bg-white z-50 flex': fullscreen}"
        :role="fullscreen ? 'dialog' : false"
    >
        <div class="relative self-center w-full"
            :class="{'fixed inset-0 h-full flex flex-col': fullscreen}"
        >
            <!-- Non-Fullscreen Content -->
            <div x-show="!fullscreen" class="relative mb-6" aria-live="polite" aria-atomic="true">
                 <?=
                    $this->getLayout()->createBlock(\Magento\Framework\View\Element\Template::class)
                        ->setTemplate('Magento_Catalog::product/slider/custom-gallery-slider.phtml')
                        ->setData('unique_id', $uniqueId1)
                        ->setData('show_arrows', true)
                        ->setData('product_name', $productName)
                        ->setData('width', $mediumWidth)
                        ->setData('height', $mediumHeight)
                        ->setData('thumbs_slides', false)
                        ->setData('class', 'galleryMainSlider')
                        ->toHtml();
                ?>

                <!-- Thumbnails -->
                <div>
                    <?=
                        $this->getLayout()->createBlock(\Magento\Framework\View\Element\Template::class)
                            ->setTemplate('Magento_Catalog::product/slider/custom-gallery-slider.phtml')
                            ->setData('unique_id', $uniqueId2)
                            ->setData('show_arrows', false)
                            ->setData('product_name', $productName)
                            ->setData('width', $smallWidth)
                            ->setData('height', $smallHeight)
                            ->setData('thumbs_slides', true)
                            ->setData('class', 'galleryThumbSlider')
                            ->toHtml();
                    ?>
                </div>
            </div>

            <!-- Fullscreen Content -->
            <div x-show="fullscreen" >
                <div class="relative text-center bg-white" style="flex: 1 1 auto;"
                    x-transition:enter="transition ease-out duration-1000"
                    x-transition:enter-start="translate-x-full"
                    x-transition:enter-end="translate-x-0"
                    x-transition:leave="transition ease-in duration-1000"
                    x-transition:leave-start="translate-x-0"
                    x-transition:leave-end="translate-x-full">
                    <div class="flex justify-end items-start pt-4 pr-4 relative relative z-[9999]">
                        <button @click="closeFullScreen()"
                                type="button"
                                class="hidden text-gray-500 p-3 hover:text-gray-600 focus:text-gray-600
                                    transition ease-in-out duration-150"
                                :class="{ 'hidden': !fullscreen, 'block': fullscreen }"
                                aria-label="<?= $escaper->escapeHtmlAttr(__('Close fullscreen')) ?>"
                        >
                            <?= $heroicons->xHtml('', 24, 24, ['aria-hidden' => 'true']) ?>
                        </button>
                    </div>

                    <img
                        :alt="images[active].caption || '<?= $escaper->escapeJs($productName) ?>'"
                        :title="images[active].caption || '<?= $escaper->escapeJs($productName) ?>'"
                        class="inset-0 object-contain object-center w-full m-auto max-h-screen-75"
                        width="<?= /* @noEscape */ $mediumWidth ?>"
                        height="<?= /* @noEscape */ $mediumHeight ?>"
                        :src="images[active].full"
                        x-transition.opacity.duration.500ms
                    />

                    <!-- Play Button for Videos -->
                    <button
                        type="button"
                        class="absolute inset-0 flex items-center justify-center z-[999]"
                        aria-label="<?= $escaper->escapeHtmlAttr(__('Play video')) ?>"
                        x-show="images[active].type === 'video' && !activeVideoType"
                        x-cloak
                        @click="activateVideo(active)"
                        @keydown.enter="activateVideo(active)"
                    >
                        <span class="sr-only"><?= $escaper->escapeHtml(__('Play video')) ?></span>
                        <?= $heroiconsSolid->playHtml(
                            'stroke-white/75 fill-black/20 transition ease-in group-hover:scale-110 md:w-24 md:h-24',
                            44,
                            44,
                            ['aria-hidden' => 'true']
                        ); ?>
                    </button>

                    <!-- Video Container for YouTube -->
                    <div class="absolute inset-0 hidden w-full h-full bg-white top-12 nonmobile"
                        :class="{ 'hidden': activeVideoType !== 'youtube' }"
                        x-transition.opacity.duration.500ms
                        x-show="images[active].type === 'video' && activeVideoType === 'youtube'"
                    >
                        <div id="youtube-player" class="w-full h-full"></div>
                    </div>

                    <!-- Video Container for Vimeo -->
                    <div class="absolute inset-0 hidden w-full h-full bg-white top-12"
                        :class="{ 'hidden': activeVideoType !== 'vimeo' }"
                        x-transition.opacity.duration.500ms
                        x-show="images[active].type === 'video' && activeVideoType === 'vimeo'"
                    >
                        <div id="vimeo-player" class="w-full h-full"></div>
                    </div>

                    <!-- Thumbnails -->
                    <div class="fixed bottom-0 left-0 right-0 px-4">
                        <?=
                            $this->getLayout()->createBlock(\Magento\Framework\View\Element\Template::class)
                                ->setTemplate('Magento_Catalog::product/slider/custom-gallery-slider.phtml')
                                ->setData('unique_id', $uniqueId2)
                                ->setData('show_arrows', false)
                                ->setData('product_name', $productName)
                                ->setData('width', $smallWidth)
                                ->setData('height', $smallHeight)
                                ->setData('thumbs_slides', true)
                                ->setData('class', 'galleryThumbSlider')
                                ->toHtml();
                        ?>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function initGallery (uniqueId1, uniqueId2, swiperJsUrl, swiperCssUrl) {
        let touchXDown, touchYDown;

        return {
            "active": 0,
            "videoData": {},
            "activeVideoType": false,
            "autoplayVideo": false,
            "loopVideo": <?= $galleryOptionVideoLoop ? 'true' : 'false' ?>,
            "relatedVideos": <?= $galleryOptionShowRelated ? 'true' : 'false' ?>,
            "vimeoPlayer": null,
            "fullscreen": false,
            "isSlider": false,
            "initialImages": <?= /* @noEscape */ $block->getGalleryImagesJson() ?>,
            "images": <?= /* @noEscape */ $block->getGalleryImagesJson() ?>,
            "appendOnReceiveImages": <?=
                $block->getVar('gallery_switch_strategy', 'Magento_ConfigurableProduct') === 'append' ? 'true' : 'false'
            ?>,
            "activeSlide": 0,
            "isSliderStart": true,
            "isSliderEnd": false,
            "itemCount": 0,
            "pageSize": 4,
            "pageFillers": 0,
            "focusTrapListener": null,
            init() {
                this.initActive();
                this.$nextTick(() => {
                    this.calcPageSize();
                    this.calcScrollStartEnd();
                });

                this.$watch('fullscreen', open => {
                    this.$nextTick(() => {
                        this.scrollLock(open);

                        window.requestAnimationFrame(() => {
                            this.calcPageSize()
                        });
                    });
                });

                if (!window.Swiper) {
                    this.addJsScript(swiperJsUrl);
                    this.addCss(swiperCssUrl);
                } else {
                    this.initializeSwiper(uniqueId1);
                    this.initializeSwiperr(uniqueId2);
                }
            },
            addJsScript(swiperJsUrl) {
                const script = document.createElement('script');
                script.type = 'text/javascript';
                script.addEventListener('load', () => {
                    this.initializeMainSwiper(uniqueId1);
                    this.initializeThumbsSwiper(uniqueId2);
                });
                script.src = swiperJsUrl;
                document.head.appendChild(script);
            },
            addCss(swiperCssUrl) {
                const link = document.createElement('link');
                link.type = 'text/css';
                link.rel = 'stylesheet';
                link.href = swiperCssUrl;
                document.head.appendChild(link);
            },
            initializeMainSwiper(uniqueId) {
                const swiperElement = this.$el.querySelector('.swiper_' + uniqueId);

                if (!swiperElement) return;

                this.swiper = new Swiper(swiperElement, {
                    slidesPerView: 1,
                    spaceBetween: 12,
                    draggable: true,
                    autoHeight: true,
                    touchEventsTarget: 'container',
                    navigation: {
                        nextEl: '.swiper-next_' + uniqueId,
                        prevEl: '.swiper-prev_' + uniqueId,
                    },

                    on: {
                        slideChange: () => {
                            this.setActive(this.swiper.activeIndex);
                        },
                    }
                });
            },
            initializeThumbsSwiper(uniqueId) {
                const swiperElement = this.$el.querySelector('.swiper_' + uniqueId);

                if (!swiperElement) return;

                var swiper = new Swiper(swiperElement, {
                    slidesPerView: 'auto',
                    spaceBetween: 12,
                    draggable: true,
                    autoHeight: true,
                    touchEventsTarget: 'container',
                    navigation: {
                        nextEl: '.swiper-next_' + uniqueId,
                        prevEl: '.swiper-prev_' + uniqueId,
                    },
                    thumbs: {
                        swiper: swiper,
                    },
                });

                // Go to the main image slide
                this.goToSlide(this.active);
            },

            handleSlideChange(index) {
                this.setActive(index);
                this.goToSlide(index);
            },
            goToSlide(index) {
                this.swiper.update();
                if (this.swiper.update) {
                    setTimeout(() => {
                        this.swiper.slideTo(index);
                    }, 500);
                }
            },

            receiveImages(images) {
                if (this.appendOnReceiveImages) {
                    const initialUrls = this.initialImages.map(image => image.full);
                    const newImages = images.filter(image => ! initialUrls.includes(image.full));
                    this.images = [].concat(this.initialImages, newImages);
                    this.handleSlideChange(newImages.length ? this.initialImages.length : 0);
                } else {
                    this.images = images;
                    this.handleSlideChange(0);
                }

                this.$nextTick(() => {
                    this.scrollTo(this.active);
                });

                this.itemCount = this.images.length;
            },
            resetGallery() {
                this.images = this.initialImages;
                this.itemCount = this.images.length;
                this.initActive();
                this.$nextTick(() => {
                    this.scrollTo(this.active);
                });
            },
            initActive() {
                let active = this.images.findIndex(function(image) {
                    return image.isMain === true
                });
                if (active === -1) {
                    active = 0;
                }
                this.setActive(active);
            },
            setActive(index) {
                this.active = index;
                this.activeVideoType = false;
                if (window.youtubePlayer) {
                    window.youtubePlayer.stopVideo();
                }
                if (this.vimeoPlayer) {
                    this.vimeoPlayer.contentWindow.postMessage(JSON.stringify({"method": "pause"}), "*");
                }
                if (this.images[index].type === 'video' && this.autoplayVideo) {
                    this.activateVideo();
                }
            },
            activateVideo() {
                const videoData = this.getVideoData();

                if (!videoData) { return }

                this.activeVideoType = videoData.type;

                if (videoData.type === "youtube") {
                    if (!window.youtubePlayer) {
                        this.initYoutubeAPI(videoData);
                    } else {
                        window.youtubePlayer.loadVideoById(videoData.id);
                    }

                } else if (videoData.type === "vimeo") {
                    this.initVimeoVideo(videoData);
                }
            },
            getVideoData() {
                const videoUrl = this.images[this.active] && this.images[this.active].videoUrl;

                if (!videoUrl) { return }

                let id,
                    type,
                    youtubeRegex,
                    vimeoRegex,
                    useYoutubeNoCookie = false;

                if (videoUrl.match(/youtube\.com|youtu\.be|youtube-nocookie.com/)) {
                    id = videoUrl.replace(/^\/(embed\/|v\/)?/, '').replace(/\/.*/, '');
                    type = 'youtube';

                    youtubeRegex = /^.*(?:(?:youtu\.be\/|v\/|vi\/|u\/\w\/|embed\/)|(?:(?:watch)?\?v(?:i)?=|\&v(?:i)?=))([^#\&\?]*).*/;
                    id = videoUrl.match(youtubeRegex)[1];

                    if (videoUrl.match(/youtube-nocookie.com/)) {
                        useYoutubeNoCookie = true;
                    }
                } else if (videoUrl.match(/vimeo\.com/)) {
                    type = 'vimeo';
                    vimeoRegex = new RegExp(['https?:\\/\\/(?:www\\.|player\\.)?vimeo.com\\/(?:channels\\/(?:\\w+\\/)',
                        '?|groups\\/([^\\/]*)\\/videos\\/|album\\/(\\d+)\\/video\\/|video\\/|)(\\d+)(?:$|\\/|\\?)'
                    ].join(''));
                    id = videoUrl.match(vimeoRegex)[3];
                }

                return id ? {
                    id: id, type: type, useYoutubeNoCookie: useYoutubeNoCookie
                } : false;
            },
            initYoutubeAPI(videoData) {
                if (document.getElementById('loadYoutubeAPI')) {
                    return;
                }
                const params = {
                    "autoplay": true
                };
                const loadYoutubeAPI = document.createElement('script');
                loadYoutubeAPI.src = 'https://www.youtube.com/iframe_api';
                loadYoutubeAPI.id = 'loadYoutubeAPI';
                const firstScriptTag = document.getElementsByTagName('script')[0];
                firstScriptTag.parentNode.insertBefore(loadYoutubeAPI, firstScriptTag);

                const host = (videoData.useYoutubeNoCookie) ?
                    'https://www.youtube-nocookie.com' :
                    'https://www.youtube.com';

                if (!this.relatedVideos) {
                    params.rel = 0;
                }
                const fireYoutubeAPI = document.createElement('script');
                fireYoutubeAPI.innerHTML = `function onYouTubeIframeAPIReady() {
                    window.youtubePlayer = new YT.Player('youtube-player', {
                        host: '${host}',
                        videoId: '${videoData.id}',
                        playerVars: ${JSON.stringify(params)},
                    });
                }`;
                firstScriptTag.parentNode.insertBefore(fireYoutubeAPI, firstScriptTag);
            },
            initVimeoVideo(videoData) {
                let additionalParams = '&autoplay=1';
                let src = '';

                const timestamp = new Date().getTime();
                const vimeoContainer = document.getElementById("vimeo-player");
                const videoId = videoData.id;

                if (!vimeoContainer || !videoId) return;

                if (this.loopVideo) {
                    additionalParams += '&loop=1';
                }
                src = 'https://player.vimeo.com/video/' +
                    videoId + '?api=1&player_id=vimeo' +
                    videoId +
                    timestamp +
                    additionalParams;
                vimeoContainer.innerHTML =
                    `<iframe id="${'vimeo' + videoId + timestamp}"
                        src="${src}"
                        width="640" height="360"
                        webkitallowfullscreen
                        mozallowfullscreen
                        allowfullscreen
                        referrerPolicy="origin"
                        allow="autoplay"
                        class="object-center w-full h-full object-fit"
                     ></iframe>`;

                this.vimeoPlayer = vimeoContainer.childNodes[0];
            },
            getSlider() {
                return this.$refs.jsThumbSlides;
            },
            calcPageSize() {
                const slider = this.getSlider();
                if (slider) {
                    const slideEl = slider.querySelector('.js_thumbs_slide'),
                        marginRight = parseInt(window.getComputedStyle(slideEl).marginRight);

                    this.itemCount = slider.querySelectorAll('.js_thumbs_slide').length;
                    this.pageSize = Math.round(slider.clientWidth / (slideEl.clientWidth + marginRight));
                    this.pageFillers = (
                        this.pageSize * Math.ceil(this.itemCount / this.pageSize)
                    ) - this.itemCount;

                    this.isSlider = ((slider.clientWidth - (this.itemCount * (slideEl.clientWidth + marginRight))) < 0);
                }
            },
            calcScrollStartEnd() {
                const slider = this.getSlider();
                if (slider) {
                    this.isSliderStart = slider.scrollLeft === 0;
                    this.isSliderEnd = Math.ceil(slider.scrollLeft + slider.offsetWidth) >= slider.scrollWidth;
                }
            },
            calcActive() {
                const slider = this.getSlider();
                if (slider) {
                    const sliderItems = this.itemCount + this.pageFillers;
                    const calculatedActiveSlide = slider.scrollLeft / (slider.scrollWidth / sliderItems);
                    this.activeSlide = Math.round(calculatedActiveSlide / this.pageSize) * this.pageSize;
                }
            },
            scrollPrevious() {
                this.scrollTo(this.activeSlide - this.pageSize);
            },
            scrollNext() {
                this.scrollTo(this.activeSlide + this.pageSize);
            },
            scrollTo(idx) {
                const slider = this.getSlider();
                if (slider) {
                    const slideWidth = slider.scrollWidth / (this.itemCount + this.pageFillers);
                    slider.scrollLeft = Math.floor(slideWidth) * idx;
                    this.activeSlide = idx;
                }
            },
            setActiveAndScrollTo(index) {
                this.setActive(index)
                if (this.isSlider) {
                    this.scrollTo(index);
                }
            },
            eventListeners: {
                ['@keydown.window.escape']() {
                    if (!this.fullscreen) return;
                    this.closeFullScreen()
                },
                ['@update-gallery.window'](event) {
                    this.receiveImages(event.detail);
                },
                ['@reset-gallery.window'](event) {
                    this.resetGallery();
                },
                ['@keyup.arrow-right.window']() {
                    if (!this.fullscreen) return;
                    this.nextItem();
                },
                ['@keyup.arrow-left.window']() {
                    if (!this.fullscreen) return;
                    this.previousItem();
                },
            },
            scrollLock(use = true) {
                document.body.style.overflow = use ? "hidden" : "";
            },
            openFullscreen() {
                this.fullscreen = true;

                hyva.trapFocus(this.$root);
            },
            closeFullScreen(setFocusTo = this.$refs.galleryFullscreenBtn) {
                // Check if a video is currently playing
                if (this.activeVideoType) {
                    if (this.activeVideoType === "youtube" && window.youtubePlayer) {
                        window.youtubePlayer.pauseVideo(); // Pause YouTube video
                    } else if (this.activeVideoType === "vimeo" && this.vimeoPlayer) {
                        this.vimeoPlayer.contentWindow.postMessage(JSON.stringify({"method": "pause"}), "*"); // Pause Vimeo video
                    }
                }

                this.fullscreen = false;
                hyva.releaseFocus(this.$root);
                this.$nextTick(() => {
                    this.calcPageSize();
                    setFocusTo && setFocusTo.focus()
                });
            },
            handleTouchStart(event) {
                if (this.images.length <= 1) {
                    return;
                }

                const firstTouch = event.touches[0];

                touchXDown = firstTouch.clientX;
                touchYDown = firstTouch.clientY;
            },
            handleTouchMove(event) {
                if (this.images.length <= 1 || !touchXDown || !touchYDown) {
                    return;
                }

                const xDiff = touchXDown - event.touches[0].clientX;
                const yDiff = touchYDown - event.touches[0].clientY;

                if (Math.abs(xDiff) > Math.abs(yDiff)) {
                    const newIndex = xDiff > 0 ?  this.getNextIndex() : this.getPreviousIndex();
                    this.setActiveAndScrollTo(newIndex)
                }
                touchXDown = touchYDown = null;
            },
            getPreviousIndex() {
                return this.active > 0 ? this.active - 1 : this.itemCount - 1;
            },
            getNextIndex() {
                return this.active + 1 === this.itemCount ? 0 : this.active + 1;
            },
            previousItem() {
                if (this.active === 0) return;
                this.setActiveAndScrollTo(this.active - 1);
            },
            nextItem() {
                if ((this.active + 1) === this.itemCount) return;
                this.setActiveAndScrollTo(this.active + 1);
            },
        }
    }
</script>
