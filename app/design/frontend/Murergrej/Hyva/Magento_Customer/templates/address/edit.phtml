<?php
declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Magento\Customer\Block\Address\Edit;
use Magento\Customer\ViewModel\Address as AddressViewModel;
use Magento\Framework\Escaper;
use Magento\Framework\View\Helper\SecureHtmlRenderer;
use Hyva\Theme\ViewModel\SvgIcons;


/** @var Edit $block */
/** @var Escaper $escaper */
/** @var SecureHtmlRenderer $secureRenderer */
/** @var ViewModelRegistry $viewModels */

$uniqueId = uniqid('_');

/** @var SvgIcons $hyvaicons */
$hyvaicons = $viewModels->require(SvgIcons::class);

/** @var AddressViewModel $addressViewModel */
$addressViewModel = $block->getViewModel();
$directoryViewModel = $viewModels->require(\Hyva\Theme\ViewModel\Directory::class);

$companyBlock = $block->getLayout()->createBlock(\Magento\Customer\Block\Widget\Company::class);
$phoneBlock = $block->getLayout()->createBlock(\Magento\Customer\Block\Widget\Telephone::class);
$faxBlock = $block->getLayout()->createBlock(\Magento\Customer\Block\Widget\Fax::class);
$streetLabel = $block->getAttributeData()->getFrontendLabel('street');
$regionLabel = $block->getAttributeData()->getFrontendLabel('region');
$showOptionalRegions = $block->getConfig('general/region/display_all');

?>

<h2 class="mb-6 text-lg md:text-xl block-title"><?=  $escaper->escapeHtml(__('Customer Address')) ?></h2>

<form class="form-address-edit mb-4"
      x-data="Object.assign(initCustomerAddressEdit(), hyva.formValidation($root))"
      @private-content-loaded.window="onPrivateContentLoaded($event.detail.data)"
      @submit="onSubmit"
      action="<?= $escaper->escapeUrl($block->getSaveUrl()) ?>"
      method="post"
      id="form-validate"
      enctype="multipart/form-data"
      data-hasrequired="<?= $escaper->escapeHtmlAttr(__('* Required Fields')) ?>"
>
    <div class="p-4 bg-white mb-4">
        <legend class="legend"><span class="text-lg font-bold"><?= $escaper->escapeHtml(__('Contact Information')) ?></span></legend>
        <?= $block->getBlockHtml('formkey') ?>
        <input type="hidden" name="success_url" value="<?= $escaper->escapeUrl($block->getSuccessUrl()) ?>">
        <input type="hidden" name="error_url" value="<?= $escaper->escapeUrl($block->getErrorUrl()) ?>">

        <div class="grid md:grid-cols-2 gap-2">
            <?= $block->getNameBlockHtml() ?>

            <?php if ($companyBlock->isEnabled()): ?>
                <div class="w-full">
                    <?= $companyBlock->setCompany($block->getAddress()->getCompany())->toHtml() ?>
                </div>
            <?php endif ?>

            <?php if ($phoneBlock->isEnabled()): ?>
                <div class="w-full">
                    <?= $phoneBlock->setTelephone($block->getAddress()->getTelephone())->toHtml() ?>
                </div>
            <?php endif ?>

            <?php if ($faxBlock->isEnabled()): ?>
                <div class="field field-reserved w-full">
                    <?= $faxBlock->setFax($block->getAddress()->getFax())->toHtml() ?>
                </div>
            <?php endif ?>
        </div>
    </div>
    <div class="p-4 bg-white">
        <legend class="legend w-full"><span class="text-lg font-bold"><?= $escaper->escapeHtml(__('Address')) ?></span></legend>
        <div class="grid md:grid-cols-2 gap-2">

            <div class="field field-reserved required">
                <label for="street_1" class="label">
                    <span><?= /* @noEscape */ $streetLabel ?></span>
                </label>
                <div class="control">
                    <input type="text"
                           name="street[]"
                           required
                           value="<?= $escaper->escapeHtmlAttr($block->getStreetLine(1)) ?>"
                           title="<?= /* @noEscape */ $streetLabel ?>"
                           id="street_1"
                           class="form-input"
                           @input.debounce="onChange"
                    />
                </div>
            </div>

            <?php for ($i = 1, $n = $addressViewModel->addressGetStreetLines(); $i < $n; $i++): ?>
                <div class="field additional">
                    <label class="label" for="street_<?= /* @noEscape */ $i + 1 ?>">
                        <span><?= $escaper->escapeHtml(__('Street Address %1', $i + 1)) ?></span>
                    </label>
                    <div class="control">
                        <input type="text" name="street[]"
                               value="<?= $escaper->escapeHtmlAttr($block->getStreetLine($i + 1)) ?>"
                               title="<?= $escaper->escapeHtmlAttr(__('Street Address %1', $i + 1)) ?>"
                               id="street_<?= /* @noEscape */ $i + 1 ?>"
                               class="form-input"
                               @input.debounce="onChange"
                        />
                    </div>
                </div>
            <?php endfor; ?>

            <?php if ($addressViewModel->addressIsVatAttributeVisible()): ?>
                <div class="field field-reserved taxvat w-full">
                    <label class="label" for="vat_id">
                        <span><?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('vat_id') ?></span>
                    </label>
                    <div class="control">
                        <input type="text"
                               name="vat_id"
                               value="<?= $escaper->escapeHtmlAttr($block->getAddress()->getVatId()) ?>"
                               title="<?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('vat_id') ?>"
                               class="form-input"
                               id="vat_id"
                               @input.debounce="onChange">
                    </div>
                </div>
            <?php endif; ?>
            <div class="field field-reserved zip w-full" :class="{ 'required': isZipRequired }">
                <label class="label" for="zip">
                    <span><?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('postcode') ?></span>
                </label>
                <div class="control">
                    <input type="text"
                           name="postcode"
                           x-ref="postcode"
                           value="<?= $escaper->escapeHtmlAttr($block->getAddress()->getPostcode()) ?>"
                           title="<?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('postcode') ?>"
                           id="zip"
                           :required="isZipRequired"
                           @input.debounce="onChange"
                           data-validate='{"postcode": true}'
                           class="form-input">
                </div>
            </div>

            <div class="field field-reserved required city w-full">
                <label class="label" for="city">
                    <span><?= /* @noEscape */ $block->getAttributeData()->getFrontendLabel('city') ?></span>
                </label>
                <div class="control">
                    <input type="text"
                           name="city"
                           required
                           value="<?= $escaper->escapeHtmlAttr($block->getAddress()->getCity()) ?>"
                           title="<?= $escaper->escapeHtmlAttr(__('City')) ?>"
                           class="form-input"
                           id="city"
                           @input.debounce="onChange">
                </div>
            </div>

            <div class="field field-reserved required country w-full">
                <!-- Next lines changed to implement custom dropdown -->
                    <?php
                        $countries = $block
                            ->getCountryCollection()
                            ->setForegroundCountries($directoryViewModel->getTopCountryCodes())
                            ->toOptionArray();

                        $options = [];

                        foreach ($countries as $country) {
                            if (!$country['value']) {
                                continue;
                            }

                            $zipRequired = isset($country['is_zipcode_optional']) ? '0' : '1';
                            $regionRequired = isset($country['is_region_required']) ? '1' : '0';
                            $options[] = [
                                'value' => $country['value'],
                                'label' => $country['label'],
                                'customAttributes' => [
                                    'data-is-zip-required' => $zipRequired,
                                    'data-is-region-required' => $regionRequired
                                ]
                            ];
                        }
                    ?>
                    <?=
                        $this->getLayout()
                        ->createBlock('Magento\Framework\View\Element\Template')
                        ->setTemplate('Hyva_Theme::ui/dropdown.phtml')
                        ->setData('id', 'country')
                        ->setData('label', $block->getAttributeData()->getFrontendLabel('country_id'))
                        ->setData('name', 'country_id')
                        ->setData('ref', 'country_id')
                        ->setData('required', true)
                        ->setData('options', $options)
                        ->setData('default', $block->getCountryId())
                        ->setData('on_change', 'changeCountry')
                        ->toHtml();
                    ?>
            </div>
            <div
                class="field field-reserved region w-full"
                x-cloak
                x-show="(hasAvailableRegions() && isRegionRequired) || showOptionalRegions"
                :class="{ 'required': isRegionRequired }"
            >
                <label class="label" for="region_id" @click="$event.preventDefault();">
                    <span><?= /* @noEscape */ $regionLabel ?></span>
                </label>
                <div class="control">
                    <template x-if="hasAvailableRegions() && (isRegionRequired || showOptionalRegions)">
                        <!-- Next lines changed to implement custom dropdown -->
                        <div
                            x-data="initStateDropdown<?= /** @noEscape */  $uniqueId ?>()"
                            class="form-select-wrapper"
                        >
                            <select
                                class="form-select w-full"
                                @mousedown="!$store.device.isMobile ? $event.preventDefault() : null"
                                @click="!$store.device.isMobile ? (isStateDropdownOpen = !isStateDropdownOpen) : null"
                                @mouseup="!$store.device.isMobile ? $event.preventDefault() : null"
                                x-model="selectedRegion"
                                @keydown="selectState()"
                                @keydown.enter.prevent="isStateDropdownOpen = false"
                                x-ref="region_id"
                                id="region_id"
                                name="region_id"
                                :required="isRegionRequired"
                                @input.debounce="onRegionIdChange"
                            >
                                <option value=""><?= $escaper->escapeHtml(__('Please select a region, state or province.')) ?></option>
                                <template x-for="regionId in Object.keys(availableRegions)">
                                    <?php /* in alpine v3, if the bound props update, the template body gets evaluated before the template condition */ ?>
                                    <?php /* because of this it is required to check if availableRegions[regionId] is set */ ?>
                                    <option :value="regionId"
                                            :name="availableRegions[regionId] && availableRegions[regionId].name"
                                            x-text="availableRegions[regionId] && availableRegions[regionId].name"
                                            :selected="selectedRegion === regionId"
                                    >
                                    </option>
                                </template>
                            </select>
                            <div class="chevron" :class="{ 'chevron-opened': isStateDropdownOpen }">
                                <!-- Change to your chevron or custom icon -->
                                <?= $hyvaicons->renderHtml('chevron', '', 20, 20) ?>
                            </div>
                            <ul
                                x-cloak
                                x-show="isStateDropdownOpen"
                                @click.away="isStateDropdownOpen = false"
                                class="form-select-options-list"
                                tabindex="0"
                                x-ref="stateDropdown"
                            >
                                <li
                                    @click="handleOptionSelectState('');"
                                    class="px-2.5 py-3.5"
                                    :class="{ 'form-select-option-selected': selectedOptionValue === '' }"
                                >
                                    <?= $escaper->escapeHtml(__('Please select a region, state or province.')) ?>
                                </li>
                                <template x-for="(regionId, index) in Object.keys(availableRegions)">
                                    <li
                                        @click="handleOptionSelectState(regionId);"
                                        class="px-2.5 py-3.5"
                                        :class="{ 'form-select-option-selected': selectedOptionValue === regionId }"
                                        :name="availableRegions[regionId] && availableRegions[regionId].name"
                                        x-text="availableRegions[regionId] && availableRegions[regionId].name"
                                        :selected="selectedRegion === regionId"
                                        :tabindex="index"
                                        :key="index"
                                    >
                                    </li>
                                </template>
                            </ul>
                        </div>
                    </template>
                    <input :type="hasAvailableRegions() && (isRegionRequired || showOptionalRegions) ? 'hidden' : 'text'"
                           id="region"
                           name="region"
                           x-ref="region"
                           value="<?= $escaper->escapeHtmlAttr($block->getRegion()) ?>"
                           title="<?= /* @noEscape */ $regionLabel ?>"
                           class="form-input"
                           aria-label="<?= /* @noEscape */ $regionLabel ?>"
                           :required="!hasAvailableRegions() && !showOptionalRegions ? isRegionRequired : false"
                           @input.debounce="onChange"
                    />
                </div>
            </div>
        </div>

        <?= $block->getChildHtml('fieldset_address_info_additional') ?>

        <?php $isDefaultMessages = array_filter([
            $block->isDefaultBilling() ? __("It's a default billing address.") : null,
            $block->isDefaultShipping() ? __("It's a default shipping address.") : null,
        ]) ?>
        <?php if ($isDefaultMessages): ?>
            <div class="message">
                <?= $escaper->escapeHtml(implode("<br>\n", $isDefaultMessages), ['br']) ?>
            </div>
        <?php endif; ?>
        <?php if (! $block->isDefaultBilling() && $block->canSetAsDefaultBilling()): ?>
            <div class="field choice set billing">
                <input type="checkbox" id="primary_billing" name="default_billing" value="1" class="checkbox">
                <label class="label" for="primary_billing">
                    <span><?= $escaper->escapeHtml(__('Use as my default billing address')) ?></span>
                </label>
            </div>
        <?php else: ?>
            <input type="hidden" name="default_billing" value="1"/>
        <?php endif; ?>

        <?php if (! $block->isDefaultShipping() && $block->canSetAsDefaultShipping()): ?>
            <div class="field choice set shipping">
                <input type="checkbox" id="primary_shipping" name="default_shipping" value="1" class="checkbox">
                <label class="label" for="primary_shipping">
                    <span><?= $escaper->escapeHtml(__('Use as my default shipping address')) ?></span>
                </label>
            </div>
        <?php else: ?>
            <input type="hidden" name="default_shipping" value="1">
        <?php endif; ?>
    </div>
    <div class="actions-toolbar">
        <div class="primary">
            <button type="submit"
                    class="btn btn-primary action save primary"
                    data-action="save-address"
                    title="<?= $escaper->escapeHtmlAttr(__('Save Address')) ?>">
                <span><?= $escaper->escapeHtml(__('Save Address')) ?></span>
            </button>
        </div>
        <div class="secondary btn btn-secondary">
            <a class="action no-underline" href="<?= $escaper->escapeUrl($block->getBackUrl()) ?>">
                <span><?= $escaper->escapeHtml(__('Go back')) ?></span>
            </a>
        </div>
    </div>
</form>

<script>
function initCustomerAddressEdit() {
    return {
        directoryData: {},
        availableRegions: {},
        messageTime: 5000,
        fieldsNames: [],
        selectedRegion: '<?= $escaper->escapeJs($block->getRegion() ?: 0) ?>',
        isZipRequired: true,
        isRegionRequired: true,
        showOptionalRegions: <?= $showOptionalRegions ? 'true' : 'false' ?>,
        onPrivateContentLoaded(data) {
            this.directoryData = data['directory-data'] || {};

            <?php if ($block->getCountryId()): ?>
                // Line changed to select country input not through ref, since it is not available on page load.
                this.setCountry(document.getElementById('country'), '<?= $escaper->escapeJs($block->getRegion()) ?>');
            <?php endif; ?>

        },
        setRegionInputValue(regionName) {
            this.$nextTick(() => {
                const regionInputElement = this.$refs['region'];
                if (regionInputElement) {
                    regionInputElement.value = regionName;
                }
            })
        },
        setCountry(countrySelectElement, initialRegion) {
            const selectedOption = countrySelectElement.options[countrySelectElement.selectedIndex];
            const countryCode = countrySelectElement.value;
            const countryData = this.directoryData[countryCode] || false;

            if (!countryData) {
                this.setRegionInputValue('');
                return;
            }

            this.isZipRequired = selectedOption.dataset.isZipRequired === '1';
            this.isRegionRequired = selectedOption.dataset.isRegionRequired === '1';

            this.availableRegions = countryData.regions || {};

            const initialRegionId = Object.keys(this.availableRegions).filter(regionId => this.availableRegions[regionId].name === initialRegion)[0];
            this.selectedRegion = initialRegionId || '0';
            this.setRegionInputValue(initialRegionId && this.availableRegions[initialRegionId].name || '');

        },
        changeCountry(event, initialRegion) {
            this.setCountry(event.target, initialRegion);
            this.validateCountryDependentFields();
            this.onChange(event);
        },
        validateCountryDependentFields() {
            this.$nextTick(() => {
                <?php /* Reinitialize validation rules for fields that depend on the country */ ?>
                this.fields['postcode'] && this.removeMessages(this.fields['postcode'])
                this.fields['region'] && this.removeMessages(this.fields['region'])
                delete this.fields['postcode'];
                delete this.fields['region'];
                <?php /* Initialize country_id, too, because the postcode validation depends on it */ ?>
                this.setupField(this.$refs['country_id']);
                this.setupField(this.$refs['postcode']);
                this.setupField(this.$refs['region']);
                this.setupField(this.$refs['region_id']);

                this.fields['postcode'] && this.validateField(this.fields['postcode']);
                this.fields['region'] && this.validateField(this.fields['region']);
                this.fields['region_id'] && this.validateField(this.fields['region_id']);
            })
        },
        hasAvailableRegions() {
            return Object.keys(this.availableRegions).length > 0;
        },
        onRegionIdChange(event) {
            this.$refs.region.value = this.selectedRegion.length > 0 ?
                this.availableRegions[this.selectedRegion].name :
                ''
            this.onChange(event)
            this.validateField(this.fields['region'])
        }
    }
}

window.addEventListener('DOMContentLoaded', () => {

    hyva.formValidation.addRule('telephone', (value, options) => {
        const phoneNumber = value.trim().replace(' ', '');
        if (phoneNumber && phoneNumber.length < (options.minlength || 3)) {
            return '<?= $escaper->escapeJs(__('The telephone number is too short.')) ?>';
        }

        return true;
    });

    const postCodeSpecs = <?= /* @noEscape */ $block->getPostCodeConfig()->getSerializedPostCodes() ?>;

    hyva.formValidation.addRule('postcode', (postCode, options, field, context) => {
        context.removeMessages(field, 'postcode-warning')
        const countryId = (context.fields['country_id'] && context.fields['country_id'].element.value),
              validatedPostCodeExamples = [],
              countryPostCodeSpecs = countryId && postCodeSpecs ? postCodeSpecs[countryId] : false;

        if (! postCode || ! countryPostCodeSpecs) return true;

        for (const postCodeSpec of Object.values(countryPostCodeSpecs)) {
            if (new RegExp(postCodeSpec.pattern).test(postCode)) return true;
            validatedPostCodeExamples.push(postCodeSpec.example);
        }
        if (validatedPostCodeExamples) {
            context.addMessages(field, 'postcode-warning', [
                '<?= $escaper->escapeJs(__('Provided Zip/Postal Code seems to be invalid.')) ?>',
                '<?= $escaper->escapeJs(__(' Example: ')) ?>' + validatedPostCodeExamples.join('; ') + '. ',
                '<?= $escaper->escapeJs(__('If you believe it is the right one you can ignore this notice.')) ?>'
            ]);
        }

        return true;
    });
})

// Next lines changed to implement custom dropdown
function initStateDropdown<?= /** @noEscape */  $uniqueId ?>() {
    return {
        isStateDropdownOpen: false,
        activeIndex: -1,
        selectedOptionValue: '',
        handleOptionSelectState(value) {
            this.isStateDropdownOpen = false;
            this.selectedOptionValue = value;
            this.$refs['region_id'].value = value;
            this.$refs['region_id'].dispatchEvent(new Event('change'));
        },
        selectState() {
            const selectedOption = this.$refs.stateDropdown.getElementsByClassName('form-select-option-selected');

            if (!Array.from(selectedOption).length) {
                return;
            }

            this.$refs.stateDropdown.scrollTo(0, selectedOption[0].offsetTop);
        },
        init() {
            this.$watch('isStateDropdownOpen', value => {
                if (!value) {
                    this.activeIndex = -1;
                } else {
                    this.$nextTick(() => {
                        this.$refs['region_id'].focus();
                        this.selectState();
                    });
                }
            });
        }
    }
}
</script>
