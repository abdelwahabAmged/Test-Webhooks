<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\HeroiconsSolid;
use Hyva\Theme\ViewModel\StoreConfig;
use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Messages;
use Hyva\Theme\ViewModel\SvgIcons;

/** @var Messages $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */

/** @var HeroiconsSolid $heroIcons */
$heroIcons = $viewModels->require(HeroiconsSolid::class);
$hyvaIcons = $viewModels->require(SvgIcons::class);
/** @var StoreConfig $storeConfig */
$storeConfig = $viewModels->require(StoreConfig::class);

$defaultSuccessMessageTimeout = $storeConfig->getStoreConfig('hyva_theme_general/messages/success_message_timeout');
$displayMode = (string) $block->getDisplayMode() ?: 'default';
$showIcon = (bool) $block->getShowIcon();
?>
<script>
    <?php if ($defaultSuccessMessageTimeout): ?>
    window.defaultSuccessMessageTimeout = <?= (int) $defaultSuccessMessageTimeout ?>;
    <?php endif; ?>
    function initMessages() {
        "use strict";
        return {
            messages: window.mageMessages || [],
            isEmpty() {
                return this.messages.reduce(
                    function (isEmpty, message) {
                        return isEmpty && message === undefined
                    }, true
                )
            },
            removeMessage(messageIndex) {
                this.messages[messageIndex] = undefined;
            },
            addMessages(messages, hideAfter) {
                messages.map((message) => {
                    this.messages = this.messages.concat(message);
                    if (hideAfter === undefined && message.type === 'success' && window.defaultSuccessMessageTimeout) {
                        hideAfter = window.defaultSuccessMessageTimeout;
                    }
                    if (hideAfter) {
                        this.setHideTimeOut(this.messages.length -1, hideAfter);
                    }
                });
            },
            setHideTimeOut(messageIndex, hideAfter) {
                setTimeout((messageIndex) => {
                    this.removeMessage(messageIndex);
                }, hideAfter, messageIndex);
            },
            getIcon(type) {
                switch (type) {
                    case 'success':
                        return <?= /** @noEscape */ json_encode($heroIcons->checkCircleHtml('', 32, 32)) ?>;
                    case 'error':
                    case 'warning':
                        return <?= /** @noEscape */ json_encode($heroIcons->exclamationHtml('', 32, 32)) ?>;
                    default:
                        return <?= /** @noEscape */ json_encode($heroIcons->informationCircleHtml('', 32, 32)) ?>;
                }
            },
            getMessageStyle(type) {
                switch (type) {
                    case 'success':
                        return 'border-green-lighter';
                    case 'error':
                        return 'border-red';
                    case 'warning':
                        return 'border-orange';
                    case 'notice':
                    case 'info':
                        return 'border-primary';
                    default:
                        return '';
                }
            },
            eventListeners: {
                ['@messages-loaded.window'](event) {
                    this.addMessages(event.detail.messages, event.detail.hideAfter)
                },
                ['@private-content-loaded.window'](event) {
                    const data = event.detail.data;
                    if (
                        data.messages &&
                        data.messages.messages &&
                        data.messages.messages.length
                    ) {
                        this.addMessages(data.messages.messages);
                    }
                },
                ['@clear-messages.window']() {
                    this.messages = [];
                }
            }
        }
    }
</script>
<section
    id="messages"
    x-data="initMessages()"
    x-bind="eventListeners"
    aria-live="assertive"
    role="alert"
>
    <template x-if="!isEmpty()">
        <div class="messages w-fit xl:ml-20 md:ml-10 py-3">
            <template x-for="(message, index) in messages" :key="index">
                <template x-if="message">
                    <div
                        class="message items-stretch gap-10 shadow-lg font-bold mb-6 bg-white
                            <?= $displayMode === 'tag' || $displayMode === 'blank'
                             ?>
                            <?= $displayMode === 'tag' ? 'p-0' : 'pt-0 pb-0 pl-5 pr-6' ?>"
                        :ui-id="'message-' + message.type"
                        :class="getMessageStyle(message.type)"
                    >
                        <?php if ($displayMode === 'tag'): ?>
                            <div class="pl-4 rounded-l-xl bg-[var(--message)]">
                                <?php if ($showIcon): ?>
                                    <div class="py-6 pr-4 text-white" x-html="getIcon(message.type)"></div>
                                <?php endif ?>
                            </div>
                        <?php endif ?>
                        <div class="grow flex items-center <?= $displayMode === 'tag' ? 'gap-6  pr-5' : 'gap-6' ?>">
                            <?php if ($showIcon && $displayMode !== 'tag'): ?>
                                <span x-html="getIcon(message.type)"<?= $displayMode === 'blank' ? 'class="text-[var(--message)]"' : '' ?>></span>
                            <?php endif ?>
                            <span class="py-7" x-html="message.text"></span>
                            <button
                                type="button"
                                class="ml-auto transition-colors py-6 <?= $displayMode === 'tag' || $displayMode === 'blank'
                                    ? 'text-slate-500 hover:text-slate-900'
                                    : 'text-[var(--message)] hover:text-[var(--message-darker)]' ?>"
                                aria-label="<?= $escaper->escapeHtml(__('Close message')) ?>"
                                @click.prevent="removeMessage(index)"
                            >
                            <?= $hyvaIcons->renderHtml('close', '', 32, 32) ?>
                             </button>
                        </div>
                    </div>
                </template>
            </template>
        </div>  
    </template>
</section>
